type Test @model {
  id: ID!
  strings: [String!]!
  name: String!
  subs: [SubTest] @connection(name: "TestSubTest", foreignKey: "parentId")
}

type SubTest
  @model
  @auth(
    provider: "AMAZON_COGNITO_USER_POOLS"
    strategy: { type: "GROUP", groups: ["admin"] }
    actions: ["read", "update", "create", "delete"]
  )
  @auth(
    provider: "AMAZON_COGNITO_USER_POOLS"
    strategy: { type: "PUBLIC" }
    actions: ["read"]
  ) {
  id: ID!
  name: String!
  parent: Test @connection(name: "TestSubTest", foreignKey: "parentId")
}

type Auth
  @model
  @auth(
    provider: "AMAZON_COGNITO_USER_POOLS"
    strategy: { type: "OWNER", ownerField: "userId" }
    actions: ["read", "update", "create", "delete"]
  ) {
  id: ID!
  userId: String!
  name: String!
  nested: Nested @connection(name: "AuthNested")
}

type Nested
  @model
  @auth(
    provider: "AMAZON_COGNITO_USER_POOLS"
    strategy: { type: "OWNER", ownerField: "userId" }
    actions: ["read", "update", "create", "delete"]
  ) {
  id: ID!
  userId: String!
}

# overrides

type Query {
  getInt(inp: Int): Int
}

type Mutation {
  putInt(inp: Int): Int
  putTest(input: CreateAuthInput): Auth
    @function(name: "echo")
    @auth(
      provider: "AMAZON_COGNITO_USER_POOLS"
      strategy: { type: "OWNER", ownerField: "userId" }
    )
}

# 以下、AppSyncとDynamoDBで使用可能な GraphQL Schema の共通定義
input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelStringConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
